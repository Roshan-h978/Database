CREATE DATABASE ELIBRARY_SYSTEM;

USE ELIBRARY_SYSTEM;

CREATE TABLE MEMBERS (
    MEMBER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE,
    PHONE VARCHAR(20),
    ADDRESS TEXT,
    MEMBER_STATUS VARCHAR(20) CHECK (MEMBER_STATUS IN ('ACTIVE', 'INACTIVE'))
);
    
INSERT INTO MEMBERS (MEMBER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, MEMBER_STATUS) VALUES
(1, 'ROSHAN', 'RAWAL', 'ROSHANRAWAL@EMAIL.COM', '0123456789', '123 MAIN ST, KUALA LUMPUR', 'ACTIVE'),
(2, 'ABISKAR', 'RUPAKHETI', 'ABISKAR@EMAIL.COM', '0123456790', '456 PARK RD, PENANG', 'ACTIVE'),
(3, 'BASANT', 'OLI', 'BASANT@EMAIL.COM', '0123456791', '789 LAKE AVE, JOHOR', 'INACTIVE'),
(4, 'AADRESH', 'POUDEL', 'AADRESH.P@EMAIL.COM', '0123456792', '321 HILL ST, SELANGOR', 'ACTIVE'),
(5, 'RAJESH', 'HAMAL', 'RAJESH.H@EMAIL.COM', '0123456793', '654 RIVER RD, KUALA LUMPUR', 'ACTIVE'),
(6, 'DIP', 'BUDHA', 'DIPBUDHA@EMAIL.COM', '0123456794', '987 BEACH RD, PENANG', 'ACTIVE'),
(7, 'KIRAN', 'KUNWAR', 'KIRAN@EMAIL.COM', '0123456795', '147 MOUNTAIN AVE, JOHOR', 'INACTIVE'),
(8, 'ALISHA', 'LAMA', 'ALISHA@EMAIL.COM', '0123456796', '258 VALLEY ST, SELANGOR', 'ACTIVE'),
(9, 'NIKHIL', 'RAWAL', 'NIKHIL@EMAIL.COM', '0123456797', '369 FOREST RD, KUALA LUMPUR', 'ACTIVE'),
(10, 'HARI', 'RAM', 'HARIRAM@EMAIL.COM', '0123456798', '741 OCEAN AVE, PENANG', 'ACTIVE');

CREATE TABLE PUBLISHERS (
    PUBLISHER_ID INT PRIMARY KEY,
    PUBLISHER_NAME VARCHAR(100) NOT NULL,
    PUBLISHER_ADDRESS TEXT
);


INSERT INTO PUBLISHERS VALUES
(1, 'TECH BOOKS LTD', '123 TECH STREET, KUALA LUMPUR'),
(2, 'GLOBAL PUBLISHING', '456 GLOBAL ROAD, SINGAPORE'),
(3, 'EDUCATION PRESS', '789 EDU LANE, PENANG'),
(4, 'DIGITAL MEDIA INC', '321 DIGITAL AVE, JOHOR'),
(5, 'KNOWLEDGE HOUSE', '654 KNOWLEDGE WAY, SELANGOR'),
(6, 'NEXT GEN BOOKS', '987 NEXT GEN STREET, KUALA LUMPUR'),
(7, 'GREEN WORLD PUBLISHERS', '234 GREEN ROAD, JOHOR'),
(8, 'INNOVATIVE PRESS', '567 INNOVATIVE AVE, PENANG'),
(9, 'LEARNING HUB', '890 LEARNING LANE, SELANGOR'),
(10, 'SCHOLAR PUBLISHING', '123 SCHOLAR WAY, SINGAPORE');

CREATE TABLE AUTHORS (
    AUTHOR_ID INT PRIMARY KEY,
    AUTHOR_NAME VARCHAR(100) NOT NULL,
    AUTHOR_EMAIL VARCHAR(100)
);

INSERT INTO AUTHORS VALUES
(1, 'SARAH WILSON', 'SARAH.W@AUTHORS.COM'),
(2, 'DAVID LEE', 'DAVID.L@AUTHORS.COM'),
(3, 'RAJ PATEL', 'RAJ.P@AUTHORS.COM'),
(4, 'MING CHEN', 'MING.C@AUTHORS.COM'),
(5, 'ANNA BROWN', 'ANNA.B@AUTHORS.COM');

CREATE TABLE GENRES (
    GENRE_ID INT PRIMARY KEY,
    GENRE_NAME VARCHAR(50) NOT NULL,
    GENRE_DESCRIPTION TEXT
);

INSERT INTO GENRES VALUES
(1, 'FANTASY', 'MAGICAL AND MYTHICAL WORLDS'),
(2, 'TECHNOLOGY', 'COMPUTING AND DIGITAL TOPICS'),
(3, 'SCIENCE', 'SCIENTIFIC RESEARCH AND DISCOVERIES'),
(4, 'FICTION', 'GENERAL FICTION STORIES'),
(5, 'BUSINESS', 'BUSINESS AND MANAGEMENT TOPICS');

CREATE TABLE CATEGORIES (
    CATEGORY_TAG VARCHAR(10) PRIMARY KEY CHECK (CATEGORY_TAG IN ('YELLOW', 'RED', 'GREEN')),
    CATEGORY_DESCRIPTION TEXT,
    LOAN_PERIOD INT NOT NULL,
    FINE_RATE DECIMAL(5,2) NOT NULL
);

INSERT INTO CATEGORIES (CATEGORY_TAG, CATEGORY_DESCRIPTION, LOAN_PERIOD, FINE_RATE) VALUES
('YELLOW', 'Adventure and Magic', 14, 1.50),
('RED', 'Technology and Gadgets', 10, 2.00),
('GREEN', 'Research and Studies', 20, 1.00);


CREATE TABLE BOOKS (
    BOOK_ID INT PRIMARY KEY,
    ISBN VARCHAR(13) NOT NULL,
    TITLE VARCHAR(200) NOT NULL,
    PUBLISHER_ID INT,
    CATEGORY_TAG VARCHAR(10),
    DESCRIPTION TEXT,
    PRICE DECIMAL(10,2),
    CAN_LOAN BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (PUBLISHER_ID) REFERENCES PUBLISHERS(PUBLISHER_ID),
    FOREIGN KEY (CATEGORY_TAG) REFERENCES CATEGORIES(CATEGORY_TAG)
);

INSERT INTO BOOKS (BOOK_ID, ISBN, TITLE, PUBLISHER_ID, CATEGORY_TAG, DESCRIPTION, PRICE, CAN_LOAN) VALUES
(1, '9781234567890', 'The Magic World', 1, 'YELLOW', 'A fantasy adventure about magical realms', 45.00, TRUE),
(2, '9780987654321', 'Tech Essentials', 2, 'RED', 'An introductory guide to technology and gadgets', 60.00, TRUE),
(3, '9781122334455', 'Business Fundamentals', 3, 'GREEN', 'A comprehensive guide on business management', 75.00, TRUE),
(4, '9786677889900', 'Future Innovations', 4, 'RED', 'Exploring the latest advancements in technology', 55.00, TRUE),
(5, '9783344556677', 'Scientific Discovery', 5, 'GREEN', 'A deep dive into the latest scientific breakthroughs', 40.00, TRUE),
(6, '9789998887776', 'Digital World', 1, 'RED', 'A look into the digital future', 65.00, TRUE),
(7, '9781239876543', 'Leadership 101', 2, 'GREEN', 'An introduction to leadership principles', 50.00, TRUE),
(8, '9785647382910', 'Tech Vision', 4, 'RED', 'A guide to the future of technology', 70.00, TRUE),
(9, '9787412589632', 'The Science of Growth', 3, 'GREEN', 'Research on scientific growth in industries', 80.00, TRUE),
(10, '9783154862743', 'Modern Business', 5, 'YELLOW', 'Business strategies in the modern age', 45.00, TRUE);


CREATE TABLE BOOK_AUTHORS (
    BOOK_ID INT,
    AUTHOR_ID INT,
    PRIMARY KEY (BOOK_ID, AUTHOR_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID)
);

INSERT INTO BOOK_AUTHORS (BOOK_ID, AUTHOR_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 1),
(7, 2),
(8, 4),
(9, 3),
(10, 5);


CREATE TABLE BOOK_GENRES (
    BOOK_ID INT,
    GENRE_ID INT,
    PRIMARY KEY (BOOK_ID, GENRE_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (GENRE_ID) REFERENCES GENRES(GENRE_ID)
);

INSERT INTO BOOK_GENRES (BOOK_ID, GENRE_ID) VALUES
(1, 1),
(2, 2),
(3, 5),
(4, 2),
(5, 3),
(6, 1),
(7, 5),
(8, 2),
(9, 3),
(10, 4);


CREATE TABLE BOOK_COPIES (
    COPY_ID INT PRIMARY KEY,
    BOOK_ID INT,
    COPY_NUMBER INT NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('AVAILABLE', 'LOANED', 'RESERVED', 'MAINTENANCE')),
    UNIQUE (BOOK_ID, COPY_NUMBER),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID)
);

INSERT INTO BOOK_COPIES (COPY_ID, BOOK_ID, COPY_NUMBER, STATUS) VALUES
(1, 1, 1, 'AVAILABLE'),
(2, 2, 1, 'LOANED'),
(3, 3, 1, 'AVAILABLE'),
(4, 4, 1, 'AVAILABLE'),
(5, 5, 1, 'AVAILABLE'),
(6, 6, 1, 'AVAILABLE'),
(7, 7, 1, 'AVAILABLE'),
(8, 8, 1, 'LOANED'),
(9, 9, 1, 'AVAILABLE'),
(10, 10, 1, 'AVAILABLE');


CREATE TABLE LOANS (
    LOAN_ID INT PRIMARY KEY,
    MEMBER_ID INT,
    COPY_ID INT,
    LOAN_DATE DATE NOT NULL,
    DUE_DATE DATE NOT NULL,
    RETURN_DATE DATE,
    STATUS VARCHAR(20) CHECK (STATUS IN ('ACTIVE', 'RETURNED', 'OVERDUE')),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    FOREIGN KEY (COPY_ID) REFERENCES BOOK_COPIES(COPY_ID)
);

INSERT INTO LOANS (LOAN_ID, MEMBER_ID, COPY_ID, LOAN_DATE, DUE_DATE, RETURN_DATE, STATUS) 
VALUES
(1, 1, 1, '2025-02-10', '2025-02-24', '2025-02-24', 'ACTIVE'),
(2, 2, 2, '2025-02-11', '2025-02-25', '2025-02-25', 'RETURNED'),
(3, 3, 3, '2025-02-12', '2025-02-26', '2025-02-26', 'ACTIVE'),
(4, 4, 4, '2025-02-13', '2025-02-27', '2025-02-27', 'RETURNED'),
(5, 5, 5, '2025-02-14', '2025-02-28', '2025-02-28', 'ACTIVE'),
(6, 6, 6, '2025-02-15', '2025-03-01', NULL, 'ACTIVE'),
(7, 7, 7, '2025-02-16', '2025-03-02', NULL, 'ACTIVE'),
(8, 8, 8, '2025-02-17', '2025-03-03', '2025-03-03', 'RETURNED'),
(9, 9, 9, '2025-02-18', '2025-03-04', NULL, 'ACTIVE'),
(10, 10, 10, '2025-02-19', '2025-03-05', '2025-03-05', 'RETURNED');



CREATE TABLE FINES (
    FINE_ID INT PRIMARY KEY,
    LOAN_ID INT,
    FINE_AMOUNT DECIMAL(10,2) NOT NULL,
    PAYMENT_STATUS VARCHAR(20) CHECK (PAYMENT_STATUS IN ('PAID', 'UNPAID')),
    PAYMENT_DATE DATE,
    FOREIGN KEY (LOAN_ID) REFERENCES LOANS(LOAN_ID)
);

INSERT INTO FINES (FINE_ID, LOAN_ID, FINE_AMOUNT, PAYMENT_STATUS) 
VALUES
(1, 1, 5.00, 'PAID'),
(2, 3, 3.00, 'UNPAID'),
(3, 5, 4.00, 'PAID'),
(4, 7, 2.00, 'UNPAID'),
(5, 9, 1.50, 'PAID'),
(6, 2, 6.00, 'UNPAID'),
(7, 4, 7.50, 'PAID'),
(8, 6, 2.50, 'PAID'),
(9, 8, 3.50, 'UNPAID'),
(10, 10, 8.00, 'PAID');



CREATE TABLE RESERVATIONS (
    RESERVATION_ID INT PRIMARY KEY,
    MEMBER_ID INT,
    BOOK_ID INT,
    RESERVATION_DATE DATE NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('ACTIVE', 'FULFILLED', 'CANCELLED')),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID)
);

INSERT INTO RESERVATIONS (RESERVATION_ID, MEMBER_ID, BOOK_ID, RESERVATION_DATE, STATUS) 
VALUES
(1, 1, 1, '2025-02-10', 'ACTIVE'),
(2, 2, 2, '2025-02-11', 'FULFILLED'),
(3, 3, 3, '2025-02-12', 'CANCELLED'),
(4, 4, 4, '2025-02-13', 'ACTIVE'),
(5, 5, 5, '2025-02-14', 'FULFILLED'),
(6, 6, 6, '2025-02-15', 'CANCELLED'),
(7, 7, 7, '2025-02-16', 'ACTIVE'),
(8, 8, 8, '2025-02-17', 'FULFILLED'),
(9, 9, 9, '2025-02-18', 'ACTIVE'),
(10, 10, 10, '2025-02-19', 'CANCELLED');


CREATE TABLE ROOMS (
    ROOM_ID INT PRIMARY KEY,
    ROOM_NAME VARCHAR(50) NOT NULL,
    CAPACITY INT
);

INSERT INTO ROOMS (ROOM_ID, ROOM_NAME, CAPACITY)
VALUES
(1, 'Room A', 50),
(2, 'Room B', 30),
(3, 'Room C', 40),
(4, 'Room D', 60),
(5, 'Room E', 25),
(6, 'Room F', 20),
(7, 'Room G', 45),
(8, 'Room H', 35),
(9, 'Room I', 70),
(10, 'Room J', 55);


CREATE TABLE ROOM_BOOKINGS (
    BOOKING_ID INT PRIMARY KEY,
    MEMBER_ID INT,
    ROOM_ID INT,
    BOOKING_DATE DATE NOT NULL,
    USAGE_DATE DATE NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('CONFIRMED', 'CANCELLED')),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    FOREIGN KEY (ROOM_ID) REFERENCES ROOMS(ROOM_ID)
);

INSERT INTO ROOM_BOOKINGS (BOOKING_ID, MEMBER_ID, ROOM_ID, BOOKING_DATE, USAGE_DATE, STATUS) 
VALUES
(1, 1, 1, '2025-02-10', '2025-02-15', 'CONFIRMED'),
(2, 2, 2, '2025-02-11', '2025-02-16', 'CANCELLED'),
(3, 3, 3, '2025-02-12', '2025-02-17', 'CONFIRMED'),
(4, 4, 4, '2025-02-13', '2025-02-18', 'CANCELLED'),
(5, 5, 5, '2025-02-14', '2025-02-19', 'CONFIRMED'),
(6, 6, 6, '2025-02-15', '2025-02-20', 'CONFIRMED'),
(7, 7, 7, '2025-02-16', '2025-02-21', 'CANCELLED'),
(8, 8, 8, '2025-02-17', '2025-02-22', 'CONFIRMED'),
(9, 9, 9, '2025-02-18', '2025-02-23', 'CANCELLED'),
(10, 10, 10, '2025-02-19', '2025-02-24', 'CONFIRMED');


SELECT B.TITLE AS Book_Name, B.DESCRIPTION AS Book_Description, 
       C.CATEGORY_TAG AS Category_Name, C.CATEGORY_DESCRIPTION AS Category_Description
FROM BOOKS B
JOIN CATEGORIES C ON B.CATEGORY_TAG = C.CATEGORY_TAG
WHERE B.CAN_LOAN = TRUE
AND B.BOOK_ID NOT IN (SELECT BOOK_ID FROM BOOK_COPIES WHERE STATUS = 'LOANED')
ORDER BY B.TITLE;


SELECT M.FIRST_NAME, M.LAST_NAME, B.TITLE AS Book_Name, L.LOAN_DATE
FROM LOANS L
JOIN MEMBERS M ON L.MEMBER_ID = M.MEMBER_ID
JOIN BOOK_COPIES BC ON L.COPY_ID = BC.COPY_ID
JOIN BOOKS B ON BC.BOOK_ID = B.BOOK_ID
WHERE M.MEMBER_STATUS = 'ACTIVE'
AND YEAR(L.LOAN_DATE) = 2025  -- Corrected to 2025
ORDER BY L.LOAN_DATE;


SELECT M.FIRST_NAME, M.LAST_NAME, M.PHONE, COUNT(F.FINE_ID) AS Overdue_Count, SUM(F.FINE_AMOUNT) AS Total_Fine
FROM FINES F
JOIN LOANS L ON F.LOAN_ID = L.LOAN_ID
JOIN MEMBERS M ON L.MEMBER_ID = M.MEMBER_ID
WHERE F.PAYMENT_STATUS = 'PAID'
AND L.STATUS = 'OVERDUE'
GROUP BY M.MEMBER_ID
HAVING COUNT(F.FINE_ID) > 2;


SELECT C.CATEGORY_TAG, B.TITLE AS Book_Name, B.DESCRIPTION AS Book_Description
FROM BOOKS B
JOIN CATEGORIES C ON B.CATEGORY_TAG = C.CATEGORY_TAG
JOIN BOOK_COPIES BC ON B.BOOK_ID = BC.BOOK_ID
JOIN LOANS L ON BC.COPY_ID = L.COPY_ID
GROUP BY C.CATEGORY_TAG, B.BOOK_ID
HAVING COUNT(L.LOAN_ID) = (
    SELECT MAX(Loan_Count)
    FROM (
        SELECT COUNT(L2.LOAN_ID) AS Loan_Count
        FROM LOANS L2
        JOIN BOOK_COPIES BC2 ON L2.COPY_ID = BC2.COPY_ID
        WHERE BC2.BOOK_ID = B.BOOK_ID
        GROUP BY L2.COPY_ID
    ) AS Subquery
)
ORDER BY C.CATEGORY_TAG DESC;

SELECT G.GENRE_NAME
FROM GENRES G
JOIN BOOK_GENRES BG ON G.GENRE_ID = BG.GENRE_ID
GROUP BY G.GENRE_NAME
ORDER BY COUNT(BG.BOOK_ID) DESC
LIMIT 1;

SELECT COUNT(R.RESERVATION_ID) AS Total_Reserved_Books
FROM RESERVATIONS R
WHERE YEAR(R.RESERVATION_DATE) = 2023;


SELECT P.PUBLISHER_NAME, COUNT(B.BOOK_ID) AS Book_Count
FROM PUBLISHERS P
JOIN BOOKS B ON P.PUBLISHER_ID = B.PUBLISHER_ID
WHERE B.CATEGORY_TAG = 'YELLOW'
GROUP BY P.PUBLISHER_NAME
ORDER BY Book_Count ASC
LIMIT 1;

SELECT A.AUTHOR_NAME, COUNT(BA.BOOK_ID) AS Book_Count
FROM AUTHORS A
JOIN BOOK_AUTHORS BA ON A.AUTHOR_ID = BA.AUTHOR_ID
GROUP BY A.AUTHOR_NAME
ORDER BY Book_Count DESC;

SELECT DISTINCT M.FIRST_NAME, M.LAST_NAME, M.PHONE
FROM MEMBERS M
JOIN LOANS L ON M.MEMBER_ID = L.MEMBER_ID
JOIN BOOK_COPIES BC ON L.COPY_ID = BC.COPY_ID
JOIN BOOKS B ON BC.BOOK_ID = B.BOOK_ID
JOIN BOOK_GENRES BG ON B.BOOK_ID = BG.BOOK_ID
JOIN GENRES G ON BG.GENRE_ID = G.GENRE_ID
WHERE G.GENRE_NAME = 'FANTASY';

SELECT B.TITLE AS Book_Name, B.DESCRIPTION AS Book_Description, 
       P.PUBLISHER_NAME, P.PUBLISHER_ADDRESS
FROM BOOKS B
JOIN PUBLISHERS P ON B.PUBLISHER_ID = P.PUBLISHER_ID
WHERE B.PRICE > 50;

SELECT P.PUBLISHER_NAME, P.PUBLISHER_ADDRESS
FROM PUBLISHERS P
JOIN BOOKS B ON P.PUBLISHER_ID = B.PUBLISHER_ID
GROUP BY P.PUBLISHER_ID, P.PUBLISHER_NAME, P.PUBLISHER_ADDRESS
HAVING COUNT(B.BOOK_ID) >= 1;




SELECT M.FIRST_NAME, M.LAST_NAME, M.PHONE
FROM MEMBERS M
LEFT JOIN ROOM_BOOKINGS RB ON M.MEMBER_ID = RB.MEMBER_ID
WHERE RB.BOOKING_ID IS NULL;


-- DELETE FROM ROOM_BOOKINGS WHERE BOOKING_ID = 1;
-- drop database elibrary_system;